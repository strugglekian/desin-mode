1.单一职责原则：一个类应该仅有一个引起它变化的原因（一个类一件事）
2.开放-封闭原则：软件实体（类，函数，模块）可以扩展但是不能修。（在程序设计的时候，把变化的代码抽象出来，面对新需求的时候，通过新增加代码还不是修改代码）
3.依赖倒转原则：抽象不依赖细节，细节应该依赖抽象。即：要针对接口编程，不要依赖实现编程。
4.里氏替换原则：子类必须能够替换掉它们的父类型
<--举例-->
一台电脑由CPU，内存，磁盘，音响等组成，每个零件负责一件事情（单一职责原则）；
扩展内存的时候，不需要对内存条修改，只需要插槽上加内存即可（开闭原则）；
主板上的插曹都是标准接口，所以不同品牌的cpu，内存条只要实现了相同的接口就能使用，屏蔽了实现。
（细节依赖抽象，抽象不依赖细节-依赖倒转原则。依赖抽象的好处，子类可以替换掉父类-里氏替换原则）；
<!--结束-->


5.迪米特法则：如果两个类不必彼此直接通信，那么两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类某一个方法的话，可以通过第三者转发调用
6.